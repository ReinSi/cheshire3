################################################## 
# GoogleSearch_services.py 
# generated by ZSI.wsdl2python 
# 
# 
##################################################


from GoogleSearch_services_types import *
from GoogleSearch_services_types import \
    urn_GoogleSearch as ns1
import urlparse, types
from ZSI.TCcompound import Struct
from ZSI import client
import ZSI

class GoogleSearchServiceInterface:
    def getGoogleSearchPort(self, portAddress=None, **kw):
        raise NonImplementationError, "method not implemented"


class GoogleSearchServiceLocator(GoogleSearchServiceInterface):
    GoogleSearchPort_address = "http://api.google.com/search/beta2"
    def getGoogleSearchPortAddress(self):
        return GoogleSearchServiceLocator.GoogleSearchPort_address

    def getGoogleSearchPort(self, portAddress=None, **kw):
        return GoogleSearchBindingSOAP(portAddress or GoogleSearchServiceLocator.GoogleSearchPort_address, **kw)


class GoogleSearchBindingSOAP:

    def __init__(self, addr, **kw):
        netloc = (urlparse.urlparse(addr)[1]).split(":") + [80,]
        if not kw.has_key("host"):
            kw["host"] = netloc[0]
        if not kw.has_key("port"):
            kw["port"] = int(netloc[1])
        if not kw.has_key("url"):
            kw["url"] =  urlparse.urlparse(addr)[2]
        self.binding = client.Binding(**kw)


    def doGetCachedPage(self, request):
        """
        @param: request to doGetCachedPage::
          _key: str
          _url: str

        @return: response from doGetCachedPageResponse::
          _return: str
        """

        if not isinstance(request, doGetCachedPage) and\
            not issubclass(doGetCachedPage, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:GoogleSearchAction", **kw)
        response = self.binding.Receive(doGetCachedPageResponseWrapper())
        if not isinstance(response, doGetCachedPageResponse) and\
            not issubclass(doGetCachedPageResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def doGoogleSearch(self, request):
        """
        @param: request to doGoogleSearch::
          _filter: boolean
          _ie: str
          _key: str
          _lr: str
          _maxResults: int
          _oe: str
          _q: str
          _restrict: str
          _safeSearch: boolean
          _start: int

        @return: response from doGoogleSearchResponse::
          _return: ns1.GoogleSearchResult_Def
            _directoryCategories: ns1.DirectoryCategoryArray_Def
              _element: ns1.DirectoryCategory_Def
                _fullViewableName: str
                _specialEncoding: str
            _documentFiltering: boolean
            _endIndex: int
            _estimateIsExact: boolean
            _estimatedTotalResultsCount: int
            _resultElements: ns1.ResultElementArray_Def
              _element: ns1.ResultElement_Def
                _URL: str
                _cachedSize: str
                _directoryCategory: ns1.DirectoryCategory_Def
                _directoryTitle: str
                _hostName: str
                _relatedInformationPresent: boolean
                _snippet: str
                _summary: str
                _title: str
            _searchComments: str
            _searchQuery: str
            _searchTime: float
            _searchTips: str
            _startIndex: int
        """

        if not isinstance(request, doGoogleSearch) and\
            not issubclass(doGoogleSearch, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:GoogleSearchAction", **kw)
        response = self.binding.Receive(doGoogleSearchResponseWrapper())
        if not isinstance(response, doGoogleSearchResponse) and\
            not issubclass(doGoogleSearchResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response


    def doSpellingSuggestion(self, request):
        """
        @param: request to doSpellingSuggestion::
          _key: str
          _phrase: str

        @return: response from doSpellingSuggestionResponse::
          _return: str
        """

        if not isinstance(request, doSpellingSuggestion) and\
            not issubclass(doSpellingSuggestion, request.__class__):
            raise TypeError, "%s incorrect request type" %(request.__class__)
        kw = {}
        response = self.binding.Send(None, None, request, soapaction="urn:GoogleSearchAction", **kw)
        response = self.binding.Receive(doSpellingSuggestionResponseWrapper())
        if not isinstance(response, doSpellingSuggestionResponse) and\
            not issubclass(doSpellingSuggestionResponse, response.__class__):
            raise TypeError, "%s incorrect response type" %(response.__class__)
        return response



class doGetCachedPage (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._key = None
        self._url = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, doGetCachedPage, [ZSI.TC.String(pname="key",aname="_key",optional=1),ZSI.TC.String(pname="url",aname="_url",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class doGetCachedPageWrapper(doGetCachedPage):
    """wrapper for rpc:encoded message"""

    typecode = doGetCachedPage(name='doGetCachedPage', ns='urn:GoogleSearch')
    def __init__( self, name=None, ns=None ):
        doGetCachedPage.__init__( self, name='doGetCachedPage', ns='urn:GoogleSearch' )

class doGetCachedPageResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._return = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, doGetCachedPageResponse, [ZSI.TC.Base64String(pname="return",aname="_return",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class doGetCachedPageResponseWrapper(doGetCachedPageResponse):
    """wrapper for rpc:encoded message"""

    typecode = doGetCachedPageResponse(name='doGetCachedPageResponse', ns='urn:GoogleSearch')
    def __init__( self, name=None, ns=None ):
        doGetCachedPageResponse.__init__( self, name='doGetCachedPageResponse', ns='urn:GoogleSearch' )

class doGoogleSearch (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._key = None
        self._q = None
        self._start = None
        self._maxResults = None
        self._filter = None
        self._restrict = None
        self._safeSearch = None
        self._lr = None
        self._ie = None
        self._oe = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, doGoogleSearch, [ZSI.TC.String(pname="key",aname="_key",optional=1),ZSI.TC.String(pname="q",aname="_q",optional=1),ZSI.TCnumbers.Iint(pname="start",aname="_start",optional=1),ZSI.TCnumbers.Iint(pname="maxResults",aname="_maxResults",optional=1),ZSI.TC.Boolean(pname="filter",aname="_filter",optional=1),ZSI.TC.String(pname="restrict",aname="_restrict",optional=1),ZSI.TC.Boolean(pname="safeSearch",aname="_safeSearch",optional=1),ZSI.TC.String(pname="lr",aname="_lr",optional=1),ZSI.TC.String(pname="ie",aname="_ie",optional=1),ZSI.TC.String(pname="oe",aname="_oe",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class doGoogleSearchWrapper(doGoogleSearch):
    """wrapper for rpc:encoded message"""

    typecode = doGoogleSearch(name='doGoogleSearch', ns='urn:GoogleSearch')
    def __init__( self, name=None, ns=None ):
        doGoogleSearch.__init__( self, name='doGoogleSearch', ns='urn:GoogleSearch' )

class doGoogleSearchResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._return = ns1.GoogleSearchResult_Def()

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, doGoogleSearchResponse, [ns1.GoogleSearchResult_Def( name="return", ns=ns ),], pname=name, aname="_%s" % name, oname=oname )

class doGoogleSearchResponseWrapper(doGoogleSearchResponse):
    """wrapper for rpc:encoded message"""

    typecode = doGoogleSearchResponse(name='doGoogleSearchResponse', ns='urn:GoogleSearch')
    def __init__( self, name=None, ns=None ):
        doGoogleSearchResponse.__init__( self, name='doGoogleSearchResponse', ns='urn:GoogleSearch' )

class doSpellingSuggestion (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._key = None
        self._phrase = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, doSpellingSuggestion, [ZSI.TC.String(pname="key",aname="_key",optional=1),ZSI.TC.String(pname="phrase",aname="_phrase",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class doSpellingSuggestionWrapper(doSpellingSuggestion):
    """wrapper for rpc:encoded message"""

    typecode = doSpellingSuggestion(name='doSpellingSuggestion', ns='urn:GoogleSearch')
    def __init__( self, name=None, ns=None ):
        doSpellingSuggestion.__init__( self, name='doSpellingSuggestion', ns='urn:GoogleSearch' )

class doSpellingSuggestionResponse (ZSI.TCcompound.Struct): 
    def __init__(self, name=None, ns=None):
        self._return = None

        oname = None
        if name:
            oname = name
            if ns:
                oname += ' xmlns="%s"' % ns
            ZSI.TC.Struct.__init__(self, doSpellingSuggestionResponse, [ZSI.TC.String(pname="return",aname="_return",optional=1),], pname=name, aname="_%s" % name, oname=oname )

class doSpellingSuggestionResponseWrapper(doSpellingSuggestionResponse):
    """wrapper for rpc:encoded message"""

    typecode = doSpellingSuggestionResponse(name='doSpellingSuggestionResponse', ns='urn:GoogleSearch')
    def __init__( self, name=None, ns=None ):
        doSpellingSuggestionResponse.__init__( self, name='doSpellingSuggestionResponse', ns='urn:GoogleSearch' )
